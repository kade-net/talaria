// source: events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.events.AcceptRequestEvent', null, global);
goog.exportSymbol('proto.events.DelegateRegisterEvent', null, global);
goog.exportSymbol('proto.events.DelegateRemoveEvent', null, global);
goog.exportSymbol('proto.events.Envelope', null, global);
goog.exportSymbol('proto.events.Event', null, global);
goog.exportSymbol('proto.events.Event.EventCase', null, global);
goog.exportSymbol('proto.events.EventRequest', null, global);
goog.exportSymbol('proto.events.EventsRequest', null, global);
goog.exportSymbol('proto.events.RequestDeniedEvent', null, global);
goog.exportSymbol('proto.events.RequestEvent', null, global);
goog.exportSymbol('proto.events.RequestInboxRegisterEvent', null, global);
goog.exportSymbol('proto.events.RequestRemoveFromPhonebookEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.Envelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.Envelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.Envelope.displayName = 'proto.events.Envelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RequestInboxRegisterEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RequestInboxRegisterEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.RequestInboxRegisterEvent.displayName = 'proto.events.RequestInboxRegisterEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RequestEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RequestEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.RequestEvent.displayName = 'proto.events.RequestEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.AcceptRequestEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.AcceptRequestEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.AcceptRequestEvent.displayName = 'proto.events.AcceptRequestEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RequestDeniedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RequestDeniedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.RequestDeniedEvent.displayName = 'proto.events.RequestDeniedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.RequestRemoveFromPhonebookEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.RequestRemoveFromPhonebookEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.RequestRemoveFromPhonebookEvent.displayName = 'proto.events.RequestRemoveFromPhonebookEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.DelegateRegisterEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.DelegateRegisterEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.DelegateRegisterEvent.displayName = 'proto.events.DelegateRegisterEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.DelegateRemoveEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.DelegateRemoveEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.DelegateRemoveEvent.displayName = 'proto.events.DelegateRemoveEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.EventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.EventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.EventRequest.displayName = 'proto.events.EventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.EventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.events.EventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.EventsRequest.displayName = 'proto.events.EventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.events.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.events.Event.oneofGroups_);
};
goog.inherits(proto.events.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.events.Event.displayName = 'proto.events.Event';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.Envelope.prototype.toObject = function(opt_includeInstance) {
  return proto.events.Envelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.Envelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.Envelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    receiver: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ref: jspb.Message.getFieldWithDefault(msg, 6, ""),
    inboxName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    senderPublicKey: jspb.Message.getFieldWithDefault(msg, 8, ""),
    receiverPublicKey: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.Envelope}
 */
proto.events.Envelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.Envelope;
  return proto.events.Envelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.Envelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.Envelope}
 */
proto.events.Envelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderPublicKey(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.Envelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.Envelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.Envelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.Envelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getInboxName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSenderPublicKey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getReceiverPublicKey();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.events.Envelope.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string receiver = 2;
 * @return {string}
 */
proto.events.Envelope.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.events.Envelope.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.events.Envelope.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 hid = 5;
 * @return {number}
 */
proto.events.Envelope.prototype.getHid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setHid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string ref = 6;
 * @return {string}
 */
proto.events.Envelope.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setRef = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.clearRef = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Envelope.prototype.hasRef = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string inbox_name = 7;
 * @return {string}
 */
proto.events.Envelope.prototype.getInboxName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setInboxName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sender_public_key = 8;
 * @return {string}
 */
proto.events.Envelope.prototype.getSenderPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setSenderPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string receiver_public_key = 9;
 * @return {string}
 */
proto.events.Envelope.prototype.getReceiverPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Envelope} returns this
 */
proto.events.Envelope.prototype.setReceiverPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RequestInboxRegisterEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RequestInboxRegisterEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RequestInboxRegisterEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestInboxRegisterEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    userAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    publicKey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RequestInboxRegisterEvent}
 */
proto.events.RequestInboxRegisterEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RequestInboxRegisterEvent;
  return proto.events.RequestInboxRegisterEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RequestInboxRegisterEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RequestInboxRegisterEvent}
 */
proto.events.RequestInboxRegisterEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RequestInboxRegisterEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RequestInboxRegisterEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RequestInboxRegisterEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestInboxRegisterEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string user_address = 1;
 * @return {string}
 */
proto.events.RequestInboxRegisterEvent.prototype.getUserAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestInboxRegisterEvent} returns this
 */
proto.events.RequestInboxRegisterEvent.prototype.setUserAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.events.RequestInboxRegisterEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.RequestInboxRegisterEvent} returns this
 */
proto.events.RequestInboxRegisterEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 hid = 3;
 * @return {number}
 */
proto.events.RequestInboxRegisterEvent.prototype.getHid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.RequestInboxRegisterEvent} returns this
 */
proto.events.RequestInboxRegisterEvent.prototype.setHid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string public_key = 4;
 * @return {string}
 */
proto.events.RequestInboxRegisterEvent.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestInboxRegisterEvent} returns this
 */
proto.events.RequestInboxRegisterEvent.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RequestEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RequestEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RequestEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inboxOwnerAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    envelope: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    inboxName: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RequestEvent}
 */
proto.events.RequestEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RequestEvent;
  return proto.events.RequestEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RequestEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RequestEvent}
 */
proto.events.RequestEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxOwnerAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvelope(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RequestEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RequestEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RequestEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInboxOwnerAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnvelope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getInboxName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string requester_address = 1;
 * @return {string}
 */
proto.events.RequestEvent.prototype.getRequesterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestEvent} returns this
 */
proto.events.RequestEvent.prototype.setRequesterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inbox_owner_address = 2;
 * @return {string}
 */
proto.events.RequestEvent.prototype.getInboxOwnerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestEvent} returns this
 */
proto.events.RequestEvent.prototype.setInboxOwnerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string envelope = 3;
 * @return {string}
 */
proto.events.RequestEvent.prototype.getEnvelope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestEvent} returns this
 */
proto.events.RequestEvent.prototype.setEnvelope = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.events.RequestEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.RequestEvent} returns this
 */
proto.events.RequestEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string inbox_name = 5;
 * @return {string}
 */
proto.events.RequestEvent.prototype.getInboxName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestEvent} returns this
 */
proto.events.RequestEvent.prototype.setInboxName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.AcceptRequestEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.events.AcceptRequestEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.AcceptRequestEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.AcceptRequestEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inboxOwnerAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inboxName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.AcceptRequestEvent}
 */
proto.events.AcceptRequestEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.AcceptRequestEvent;
  return proto.events.AcceptRequestEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.AcceptRequestEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.AcceptRequestEvent}
 */
proto.events.AcceptRequestEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxOwnerAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.AcceptRequestEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.AcceptRequestEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.AcceptRequestEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.AcceptRequestEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInboxOwnerAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getInboxName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string requester_address = 1;
 * @return {string}
 */
proto.events.AcceptRequestEvent.prototype.getRequesterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.AcceptRequestEvent} returns this
 */
proto.events.AcceptRequestEvent.prototype.setRequesterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inbox_owner_address = 2;
 * @return {string}
 */
proto.events.AcceptRequestEvent.prototype.getInboxOwnerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.AcceptRequestEvent} returns this
 */
proto.events.AcceptRequestEvent.prototype.setInboxOwnerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.events.AcceptRequestEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.AcceptRequestEvent} returns this
 */
proto.events.AcceptRequestEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string inbox_name = 4;
 * @return {string}
 */
proto.events.AcceptRequestEvent.prototype.getInboxName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.AcceptRequestEvent} returns this
 */
proto.events.AcceptRequestEvent.prototype.setInboxName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RequestDeniedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RequestDeniedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RequestDeniedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestDeniedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inboxOwnerAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inboxName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RequestDeniedEvent}
 */
proto.events.RequestDeniedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RequestDeniedEvent;
  return proto.events.RequestDeniedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RequestDeniedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RequestDeniedEvent}
 */
proto.events.RequestDeniedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxOwnerAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RequestDeniedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RequestDeniedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RequestDeniedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestDeniedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInboxOwnerAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getInboxName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string requester_address = 1;
 * @return {string}
 */
proto.events.RequestDeniedEvent.prototype.getRequesterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestDeniedEvent} returns this
 */
proto.events.RequestDeniedEvent.prototype.setRequesterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inbox_owner_address = 2;
 * @return {string}
 */
proto.events.RequestDeniedEvent.prototype.getInboxOwnerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestDeniedEvent} returns this
 */
proto.events.RequestDeniedEvent.prototype.setInboxOwnerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.events.RequestDeniedEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.RequestDeniedEvent} returns this
 */
proto.events.RequestDeniedEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string inbox_name = 4;
 * @return {string}
 */
proto.events.RequestDeniedEvent.prototype.getInboxName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestDeniedEvent} returns this
 */
proto.events.RequestDeniedEvent.prototype.setInboxName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.events.RequestRemoveFromPhonebookEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.RequestRemoveFromPhonebookEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestRemoveFromPhonebookEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    requesterAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inboxOwnerAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inboxName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.RequestRemoveFromPhonebookEvent}
 */
proto.events.RequestRemoveFromPhonebookEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.RequestRemoveFromPhonebookEvent;
  return proto.events.RequestRemoveFromPhonebookEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.RequestRemoveFromPhonebookEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.RequestRemoveFromPhonebookEvent}
 */
proto.events.RequestRemoveFromPhonebookEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxOwnerAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboxName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.RequestRemoveFromPhonebookEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.RequestRemoveFromPhonebookEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.RequestRemoveFromPhonebookEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequesterAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInboxOwnerAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getInboxName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string requester_address = 1;
 * @return {string}
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.getRequesterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestRemoveFromPhonebookEvent} returns this
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.setRequesterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inbox_owner_address = 2;
 * @return {string}
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.getInboxOwnerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestRemoveFromPhonebookEvent} returns this
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.setInboxOwnerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.RequestRemoveFromPhonebookEvent} returns this
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string inbox_name = 4;
 * @return {string}
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.getInboxName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.RequestRemoveFromPhonebookEvent} returns this
 */
proto.events.RequestRemoveFromPhonebookEvent.prototype.setInboxName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.DelegateRegisterEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.events.DelegateRegisterEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.DelegateRegisterEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.DelegateRegisterEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    delegateHid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userHid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    delegateAddress: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.DelegateRegisterEvent}
 */
proto.events.DelegateRegisterEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.DelegateRegisterEvent;
  return proto.events.DelegateRegisterEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.DelegateRegisterEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.DelegateRegisterEvent}
 */
proto.events.DelegateRegisterEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegateHid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserHid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegateAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.DelegateRegisterEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.DelegateRegisterEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.DelegateRegisterEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.DelegateRegisterEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDelegateHid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserHid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDelegateAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string owner = 1;
 * @return {string}
 */
proto.events.DelegateRegisterEvent.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRegisterEvent} returns this
 */
proto.events.DelegateRegisterEvent.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string delegate_hid = 2;
 * @return {string}
 */
proto.events.DelegateRegisterEvent.prototype.getDelegateHid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRegisterEvent} returns this
 */
proto.events.DelegateRegisterEvent.prototype.setDelegateHid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_hid = 3;
 * @return {string}
 */
proto.events.DelegateRegisterEvent.prototype.getUserHid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRegisterEvent} returns this
 */
proto.events.DelegateRegisterEvent.prototype.setUserHid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string delegate_address = 4;
 * @return {string}
 */
proto.events.DelegateRegisterEvent.prototype.getDelegateAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRegisterEvent} returns this
 */
proto.events.DelegateRegisterEvent.prototype.setDelegateAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.DelegateRemoveEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.events.DelegateRemoveEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.DelegateRemoveEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.DelegateRemoveEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegateAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    delegateHid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ownerHid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.DelegateRemoveEvent}
 */
proto.events.DelegateRemoveEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.DelegateRemoveEvent;
  return proto.events.DelegateRemoveEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.DelegateRemoveEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.DelegateRemoveEvent}
 */
proto.events.DelegateRemoveEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegateAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegateHid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerHid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.DelegateRemoveEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.DelegateRemoveEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.DelegateRemoveEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.DelegateRemoveEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelegateAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDelegateHid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOwnerHid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string delegate_address = 1;
 * @return {string}
 */
proto.events.DelegateRemoveEvent.prototype.getDelegateAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRemoveEvent} returns this
 */
proto.events.DelegateRemoveEvent.prototype.setDelegateAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string delegate_hid = 2;
 * @return {string}
 */
proto.events.DelegateRemoveEvent.prototype.getDelegateHid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRemoveEvent} returns this
 */
proto.events.DelegateRemoveEvent.prototype.setDelegateHid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string owner_address = 3;
 * @return {string}
 */
proto.events.DelegateRemoveEvent.prototype.getOwnerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRemoveEvent} returns this
 */
proto.events.DelegateRemoveEvent.prototype.setOwnerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string owner_hid = 4;
 * @return {string}
 */
proto.events.DelegateRemoveEvent.prototype.getOwnerHid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.DelegateRemoveEvent} returns this
 */
proto.events.DelegateRemoveEvent.prototype.setOwnerHid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.EventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.events.EventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.EventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.EventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.EventRequest}
 */
proto.events.EventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.EventRequest;
  return proto.events.EventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.EventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.EventRequest}
 */
proto.events.EventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.EventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.EventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.EventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.EventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 sequence_number = 1;
 * @return {number}
 */
proto.events.EventRequest.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.EventRequest} returns this
 */
proto.events.EventRequest.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.EventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.events.EventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.EventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.EventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventType: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.EventsRequest}
 */
proto.events.EventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.EventsRequest;
  return proto.events.EventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.EventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.EventsRequest}
 */
proto.events.EventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequenceNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.EventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.EventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.EventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.EventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 sequence_number = 1;
 * @return {number}
 */
proto.events.EventsRequest.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.EventsRequest} returns this
 */
proto.events.EventsRequest.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string event_type = 2;
 * @return {string}
 */
proto.events.EventsRequest.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.EventsRequest} returns this
 */
proto.events.EventsRequest.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.events.Event.oneofGroups_ = [[3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.events.Event.EventCase = {
  EVENT_NOT_SET: 0,
  REQUEST_INBOX_REGISTER_EVENT: 3,
  REQUEST_EVENT: 4,
  ACCEPT_REQUEST_EVENT: 5,
  REQUEST_DENIED_EVENT: 6,
  REQUEST_REMOVE_FROM_PHONEBOOK_EVENT: 7,
  DELEGATE_REGISTER_EVENT: 8,
  DELEGATE_REMOVE_EVENT: 9,
  ENVELOPE: 10
};

/**
 * @return {proto.events.Event.EventCase}
 */
proto.events.Event.prototype.getEventCase = function() {
  return /** @type {proto.events.Event.EventCase} */(jspb.Message.computeOneofCase(this, proto.events.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.events.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.events.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.events.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestInboxRegisterEvent: (f = msg.getRequestInboxRegisterEvent()) && proto.events.RequestInboxRegisterEvent.toObject(includeInstance, f),
    requestEvent: (f = msg.getRequestEvent()) && proto.events.RequestEvent.toObject(includeInstance, f),
    acceptRequestEvent: (f = msg.getAcceptRequestEvent()) && proto.events.AcceptRequestEvent.toObject(includeInstance, f),
    requestDeniedEvent: (f = msg.getRequestDeniedEvent()) && proto.events.RequestDeniedEvent.toObject(includeInstance, f),
    requestRemoveFromPhonebookEvent: (f = msg.getRequestRemoveFromPhonebookEvent()) && proto.events.RequestRemoveFromPhonebookEvent.toObject(includeInstance, f),
    delegateRegisterEvent: (f = msg.getDelegateRegisterEvent()) && proto.events.DelegateRegisterEvent.toObject(includeInstance, f),
    delegateRemoveEvent: (f = msg.getDelegateRemoveEvent()) && proto.events.DelegateRemoveEvent.toObject(includeInstance, f),
    envelope: (f = msg.getEnvelope()) && proto.events.Envelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.events.Event}
 */
proto.events.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.events.Event;
  return proto.events.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.events.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.events.Event}
 */
proto.events.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequenceNumber(value);
      break;
    case 3:
      var value = new proto.events.RequestInboxRegisterEvent;
      reader.readMessage(value,proto.events.RequestInboxRegisterEvent.deserializeBinaryFromReader);
      msg.setRequestInboxRegisterEvent(value);
      break;
    case 4:
      var value = new proto.events.RequestEvent;
      reader.readMessage(value,proto.events.RequestEvent.deserializeBinaryFromReader);
      msg.setRequestEvent(value);
      break;
    case 5:
      var value = new proto.events.AcceptRequestEvent;
      reader.readMessage(value,proto.events.AcceptRequestEvent.deserializeBinaryFromReader);
      msg.setAcceptRequestEvent(value);
      break;
    case 6:
      var value = new proto.events.RequestDeniedEvent;
      reader.readMessage(value,proto.events.RequestDeniedEvent.deserializeBinaryFromReader);
      msg.setRequestDeniedEvent(value);
      break;
    case 7:
      var value = new proto.events.RequestRemoveFromPhonebookEvent;
      reader.readMessage(value,proto.events.RequestRemoveFromPhonebookEvent.deserializeBinaryFromReader);
      msg.setRequestRemoveFromPhonebookEvent(value);
      break;
    case 8:
      var value = new proto.events.DelegateRegisterEvent;
      reader.readMessage(value,proto.events.DelegateRegisterEvent.deserializeBinaryFromReader);
      msg.setDelegateRegisterEvent(value);
      break;
    case 9:
      var value = new proto.events.DelegateRemoveEvent;
      reader.readMessage(value,proto.events.DelegateRemoveEvent.deserializeBinaryFromReader);
      msg.setDelegateRemoveEvent(value);
      break;
    case 10:
      var value = new proto.events.Envelope;
      reader.readMessage(value,proto.events.Envelope.deserializeBinaryFromReader);
      msg.setEnvelope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.events.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.events.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.events.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.events.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRequestInboxRegisterEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.events.RequestInboxRegisterEvent.serializeBinaryToWriter
    );
  }
  f = message.getRequestEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.events.RequestEvent.serializeBinaryToWriter
    );
  }
  f = message.getAcceptRequestEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.events.AcceptRequestEvent.serializeBinaryToWriter
    );
  }
  f = message.getRequestDeniedEvent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.events.RequestDeniedEvent.serializeBinaryToWriter
    );
  }
  f = message.getRequestRemoveFromPhonebookEvent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.events.RequestRemoveFromPhonebookEvent.serializeBinaryToWriter
    );
  }
  f = message.getDelegateRegisterEvent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.events.DelegateRegisterEvent.serializeBinaryToWriter
    );
  }
  f = message.getDelegateRemoveEvent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.events.DelegateRemoveEvent.serializeBinaryToWriter
    );
  }
  f = message.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.events.Envelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_type = 1;
 * @return {string}
 */
proto.events.Event.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.setEventType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 sequence_number = 2;
 * @return {number}
 */
proto.events.Event.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RequestInboxRegisterEvent request_inbox_register_event = 3;
 * @return {?proto.events.RequestInboxRegisterEvent}
 */
proto.events.Event.prototype.getRequestInboxRegisterEvent = function() {
  return /** @type{?proto.events.RequestInboxRegisterEvent} */ (
    jspb.Message.getWrapperField(this, proto.events.RequestInboxRegisterEvent, 3));
};


/**
 * @param {?proto.events.RequestInboxRegisterEvent|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setRequestInboxRegisterEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearRequestInboxRegisterEvent = function() {
  return this.setRequestInboxRegisterEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasRequestInboxRegisterEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestEvent request_event = 4;
 * @return {?proto.events.RequestEvent}
 */
proto.events.Event.prototype.getRequestEvent = function() {
  return /** @type{?proto.events.RequestEvent} */ (
    jspb.Message.getWrapperField(this, proto.events.RequestEvent, 4));
};


/**
 * @param {?proto.events.RequestEvent|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setRequestEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearRequestEvent = function() {
  return this.setRequestEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasRequestEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AcceptRequestEvent accept_request_event = 5;
 * @return {?proto.events.AcceptRequestEvent}
 */
proto.events.Event.prototype.getAcceptRequestEvent = function() {
  return /** @type{?proto.events.AcceptRequestEvent} */ (
    jspb.Message.getWrapperField(this, proto.events.AcceptRequestEvent, 5));
};


/**
 * @param {?proto.events.AcceptRequestEvent|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setAcceptRequestEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearAcceptRequestEvent = function() {
  return this.setAcceptRequestEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasAcceptRequestEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestDeniedEvent request_denied_event = 6;
 * @return {?proto.events.RequestDeniedEvent}
 */
proto.events.Event.prototype.getRequestDeniedEvent = function() {
  return /** @type{?proto.events.RequestDeniedEvent} */ (
    jspb.Message.getWrapperField(this, proto.events.RequestDeniedEvent, 6));
};


/**
 * @param {?proto.events.RequestDeniedEvent|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setRequestDeniedEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearRequestDeniedEvent = function() {
  return this.setRequestDeniedEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasRequestDeniedEvent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestRemoveFromPhonebookEvent request_remove_from_phonebook_event = 7;
 * @return {?proto.events.RequestRemoveFromPhonebookEvent}
 */
proto.events.Event.prototype.getRequestRemoveFromPhonebookEvent = function() {
  return /** @type{?proto.events.RequestRemoveFromPhonebookEvent} */ (
    jspb.Message.getWrapperField(this, proto.events.RequestRemoveFromPhonebookEvent, 7));
};


/**
 * @param {?proto.events.RequestRemoveFromPhonebookEvent|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setRequestRemoveFromPhonebookEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearRequestRemoveFromPhonebookEvent = function() {
  return this.setRequestRemoveFromPhonebookEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasRequestRemoveFromPhonebookEvent = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DelegateRegisterEvent delegate_register_event = 8;
 * @return {?proto.events.DelegateRegisterEvent}
 */
proto.events.Event.prototype.getDelegateRegisterEvent = function() {
  return /** @type{?proto.events.DelegateRegisterEvent} */ (
    jspb.Message.getWrapperField(this, proto.events.DelegateRegisterEvent, 8));
};


/**
 * @param {?proto.events.DelegateRegisterEvent|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setDelegateRegisterEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearDelegateRegisterEvent = function() {
  return this.setDelegateRegisterEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasDelegateRegisterEvent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DelegateRemoveEvent delegate_remove_event = 9;
 * @return {?proto.events.DelegateRemoveEvent}
 */
proto.events.Event.prototype.getDelegateRemoveEvent = function() {
  return /** @type{?proto.events.DelegateRemoveEvent} */ (
    jspb.Message.getWrapperField(this, proto.events.DelegateRemoveEvent, 9));
};


/**
 * @param {?proto.events.DelegateRemoveEvent|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setDelegateRemoveEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearDelegateRemoveEvent = function() {
  return this.setDelegateRemoveEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasDelegateRemoveEvent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Envelope envelope = 10;
 * @return {?proto.events.Envelope}
 */
proto.events.Event.prototype.getEnvelope = function() {
  return /** @type{?proto.events.Envelope} */ (
    jspb.Message.getWrapperField(this, proto.events.Envelope, 10));
};


/**
 * @param {?proto.events.Envelope|undefined} value
 * @return {!proto.events.Event} returns this
*/
proto.events.Event.prototype.setEnvelope = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.events.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.events.Event} returns this
 */
proto.events.Event.prototype.clearEnvelope = function() {
  return this.setEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.events.Event.prototype.hasEnvelope = function() {
  return jspb.Message.getField(this, 10) != null;
};


goog.object.extend(exports, proto.events);
