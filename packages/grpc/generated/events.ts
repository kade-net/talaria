/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace events {
    export class Envelope extends pb_1.Message {
        #one_of_decls: number[][] = [[6]];
        constructor(data?: any[] | ({
            sender?: string;
            receiver?: string;
            content?: string;
            timestamp?: number;
            hid?: number;
            inbox_name?: string;
        } & (({
            ref?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("receiver" in data && data.receiver != undefined) {
                    this.receiver = data.receiver;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("hid" in data && data.hid != undefined) {
                    this.hid = data.hid;
                }
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("inbox_name" in data && data.inbox_name != undefined) {
                    this.inbox_name = data.inbox_name;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get receiver() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set receiver(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hid() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set hid(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_ref() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get inbox_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set inbox_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get _ref() {
            const cases: {
                [index: number]: "none" | "ref";
            } = {
                0: "none",
                6: "ref"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            sender?: string;
            receiver?: string;
            content?: string;
            timestamp?: number;
            hid?: number;
            ref?: string;
            inbox_name?: string;
        }): Envelope {
            const message = new Envelope({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.receiver != null) {
                message.receiver = data.receiver;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.hid != null) {
                message.hid = data.hid;
            }
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.inbox_name != null) {
                message.inbox_name = data.inbox_name;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                receiver?: string;
                content?: string;
                timestamp?: number;
                hid?: number;
                ref?: string;
                inbox_name?: string;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.receiver != null) {
                data.receiver = this.receiver;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.hid != null) {
                data.hid = this.hid;
            }
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.inbox_name != null) {
                data.inbox_name = this.inbox_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.receiver.length)
                writer.writeString(2, this.receiver);
            if (this.content.length)
                writer.writeString(3, this.content);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (this.hid != 0)
                writer.writeInt32(5, this.hid);
            if (this.has_ref)
                writer.writeString(6, this.ref);
            if (this.inbox_name.length)
                writer.writeString(7, this.inbox_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Envelope {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Envelope();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.receiver = reader.readString();
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    case 5:
                        message.hid = reader.readInt32();
                        break;
                    case 6:
                        message.ref = reader.readString();
                        break;
                    case 7:
                        message.inbox_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Envelope {
            return Envelope.deserialize(bytes);
        }
    }
    export class RequestInboxRegisterEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_address?: string;
            timestamp?: number;
            hid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_address" in data && data.user_address != undefined) {
                    this.user_address = data.user_address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("hid" in data && data.hid != undefined) {
                    this.hid = data.hid;
                }
            }
        }
        get user_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get hid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set hid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            user_address?: string;
            timestamp?: number;
            hid?: number;
        }): RequestInboxRegisterEvent {
            const message = new RequestInboxRegisterEvent({});
            if (data.user_address != null) {
                message.user_address = data.user_address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.hid != null) {
                message.hid = data.hid;
            }
            return message;
        }
        toObject() {
            const data: {
                user_address?: string;
                timestamp?: number;
                hid?: number;
            } = {};
            if (this.user_address != null) {
                data.user_address = this.user_address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.hid != null) {
                data.hid = this.hid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_address.length)
                writer.writeString(1, this.user_address);
            if (this.timestamp != 0)
                writer.writeInt64(2, this.timestamp);
            if (this.hid != 0)
                writer.writeInt32(3, this.hid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestInboxRegisterEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestInboxRegisterEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_address = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readInt64();
                        break;
                    case 3:
                        message.hid = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestInboxRegisterEvent {
            return RequestInboxRegisterEvent.deserialize(bytes);
        }
    }
    export class RequestEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requester_address?: string;
            inbox_owner_address?: string;
            envelope?: string;
            timestamp?: number;
            inbox_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requester_address" in data && data.requester_address != undefined) {
                    this.requester_address = data.requester_address;
                }
                if ("inbox_owner_address" in data && data.inbox_owner_address != undefined) {
                    this.inbox_owner_address = data.inbox_owner_address;
                }
                if ("envelope" in data && data.envelope != undefined) {
                    this.envelope = data.envelope;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("inbox_name" in data && data.inbox_name != undefined) {
                    this.inbox_name = data.inbox_name;
                }
            }
        }
        get requester_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requester_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inbox_owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set inbox_owner_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get envelope() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set envelope(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get inbox_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set inbox_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            requester_address?: string;
            inbox_owner_address?: string;
            envelope?: string;
            timestamp?: number;
            inbox_name?: string;
        }): RequestEvent {
            const message = new RequestEvent({});
            if (data.requester_address != null) {
                message.requester_address = data.requester_address;
            }
            if (data.inbox_owner_address != null) {
                message.inbox_owner_address = data.inbox_owner_address;
            }
            if (data.envelope != null) {
                message.envelope = data.envelope;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.inbox_name != null) {
                message.inbox_name = data.inbox_name;
            }
            return message;
        }
        toObject() {
            const data: {
                requester_address?: string;
                inbox_owner_address?: string;
                envelope?: string;
                timestamp?: number;
                inbox_name?: string;
            } = {};
            if (this.requester_address != null) {
                data.requester_address = this.requester_address;
            }
            if (this.inbox_owner_address != null) {
                data.inbox_owner_address = this.inbox_owner_address;
            }
            if (this.envelope != null) {
                data.envelope = this.envelope;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.inbox_name != null) {
                data.inbox_name = this.inbox_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requester_address.length)
                writer.writeString(1, this.requester_address);
            if (this.inbox_owner_address.length)
                writer.writeString(2, this.inbox_owner_address);
            if (this.envelope.length)
                writer.writeString(3, this.envelope);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (this.inbox_name.length)
                writer.writeString(5, this.inbox_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requester_address = reader.readString();
                        break;
                    case 2:
                        message.inbox_owner_address = reader.readString();
                        break;
                    case 3:
                        message.envelope = reader.readString();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    case 5:
                        message.inbox_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestEvent {
            return RequestEvent.deserialize(bytes);
        }
    }
    export class AcceptRequestEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requester_address?: string;
            inbox_owner_address?: string;
            timestamp?: number;
            inbox_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requester_address" in data && data.requester_address != undefined) {
                    this.requester_address = data.requester_address;
                }
                if ("inbox_owner_address" in data && data.inbox_owner_address != undefined) {
                    this.inbox_owner_address = data.inbox_owner_address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("inbox_name" in data && data.inbox_name != undefined) {
                    this.inbox_name = data.inbox_name;
                }
            }
        }
        get requester_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requester_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inbox_owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set inbox_owner_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get inbox_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set inbox_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            requester_address?: string;
            inbox_owner_address?: string;
            timestamp?: number;
            inbox_name?: string;
        }): AcceptRequestEvent {
            const message = new AcceptRequestEvent({});
            if (data.requester_address != null) {
                message.requester_address = data.requester_address;
            }
            if (data.inbox_owner_address != null) {
                message.inbox_owner_address = data.inbox_owner_address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.inbox_name != null) {
                message.inbox_name = data.inbox_name;
            }
            return message;
        }
        toObject() {
            const data: {
                requester_address?: string;
                inbox_owner_address?: string;
                timestamp?: number;
                inbox_name?: string;
            } = {};
            if (this.requester_address != null) {
                data.requester_address = this.requester_address;
            }
            if (this.inbox_owner_address != null) {
                data.inbox_owner_address = this.inbox_owner_address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.inbox_name != null) {
                data.inbox_name = this.inbox_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requester_address.length)
                writer.writeString(1, this.requester_address);
            if (this.inbox_owner_address.length)
                writer.writeString(2, this.inbox_owner_address);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.inbox_name.length)
                writer.writeString(4, this.inbox_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcceptRequestEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcceptRequestEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requester_address = reader.readString();
                        break;
                    case 2:
                        message.inbox_owner_address = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        message.inbox_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcceptRequestEvent {
            return AcceptRequestEvent.deserialize(bytes);
        }
    }
    export class RequestDeniedEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requester_address?: string;
            inbox_owner_address?: string;
            timestamp?: number;
            inbox_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requester_address" in data && data.requester_address != undefined) {
                    this.requester_address = data.requester_address;
                }
                if ("inbox_owner_address" in data && data.inbox_owner_address != undefined) {
                    this.inbox_owner_address = data.inbox_owner_address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("inbox_name" in data && data.inbox_name != undefined) {
                    this.inbox_name = data.inbox_name;
                }
            }
        }
        get requester_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requester_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inbox_owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set inbox_owner_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get inbox_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set inbox_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            requester_address?: string;
            inbox_owner_address?: string;
            timestamp?: number;
            inbox_name?: string;
        }): RequestDeniedEvent {
            const message = new RequestDeniedEvent({});
            if (data.requester_address != null) {
                message.requester_address = data.requester_address;
            }
            if (data.inbox_owner_address != null) {
                message.inbox_owner_address = data.inbox_owner_address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.inbox_name != null) {
                message.inbox_name = data.inbox_name;
            }
            return message;
        }
        toObject() {
            const data: {
                requester_address?: string;
                inbox_owner_address?: string;
                timestamp?: number;
                inbox_name?: string;
            } = {};
            if (this.requester_address != null) {
                data.requester_address = this.requester_address;
            }
            if (this.inbox_owner_address != null) {
                data.inbox_owner_address = this.inbox_owner_address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.inbox_name != null) {
                data.inbox_name = this.inbox_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requester_address.length)
                writer.writeString(1, this.requester_address);
            if (this.inbox_owner_address.length)
                writer.writeString(2, this.inbox_owner_address);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.inbox_name.length)
                writer.writeString(4, this.inbox_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestDeniedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestDeniedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requester_address = reader.readString();
                        break;
                    case 2:
                        message.inbox_owner_address = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        message.inbox_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestDeniedEvent {
            return RequestDeniedEvent.deserialize(bytes);
        }
    }
    export class RequestRemoveFromPhonebookEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requester_address?: string;
            inbox_owner_address?: string;
            timestamp?: number;
            inbox_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requester_address" in data && data.requester_address != undefined) {
                    this.requester_address = data.requester_address;
                }
                if ("inbox_owner_address" in data && data.inbox_owner_address != undefined) {
                    this.inbox_owner_address = data.inbox_owner_address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("inbox_name" in data && data.inbox_name != undefined) {
                    this.inbox_name = data.inbox_name;
                }
            }
        }
        get requester_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requester_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inbox_owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set inbox_owner_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get inbox_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set inbox_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            requester_address?: string;
            inbox_owner_address?: string;
            timestamp?: number;
            inbox_name?: string;
        }): RequestRemoveFromPhonebookEvent {
            const message = new RequestRemoveFromPhonebookEvent({});
            if (data.requester_address != null) {
                message.requester_address = data.requester_address;
            }
            if (data.inbox_owner_address != null) {
                message.inbox_owner_address = data.inbox_owner_address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.inbox_name != null) {
                message.inbox_name = data.inbox_name;
            }
            return message;
        }
        toObject() {
            const data: {
                requester_address?: string;
                inbox_owner_address?: string;
                timestamp?: number;
                inbox_name?: string;
            } = {};
            if (this.requester_address != null) {
                data.requester_address = this.requester_address;
            }
            if (this.inbox_owner_address != null) {
                data.inbox_owner_address = this.inbox_owner_address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.inbox_name != null) {
                data.inbox_name = this.inbox_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requester_address.length)
                writer.writeString(1, this.requester_address);
            if (this.inbox_owner_address.length)
                writer.writeString(2, this.inbox_owner_address);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.inbox_name.length)
                writer.writeString(4, this.inbox_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestRemoveFromPhonebookEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestRemoveFromPhonebookEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requester_address = reader.readString();
                        break;
                    case 2:
                        message.inbox_owner_address = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        message.inbox_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestRemoveFromPhonebookEvent {
            return RequestRemoveFromPhonebookEvent.deserialize(bytes);
        }
    }
    export class DelegateRegisterEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner?: string;
            delegate_hid?: string;
            user_hid?: string;
            delegate_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("delegate_hid" in data && data.delegate_hid != undefined) {
                    this.delegate_hid = data.delegate_hid;
                }
                if ("user_hid" in data && data.user_hid != undefined) {
                    this.user_hid = data.user_hid;
                }
                if ("delegate_address" in data && data.delegate_address != undefined) {
                    this.delegate_address = data.delegate_address;
                }
            }
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get delegate_hid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set delegate_hid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_hid() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_hid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get delegate_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set delegate_address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            owner?: string;
            delegate_hid?: string;
            user_hid?: string;
            delegate_address?: string;
        }): DelegateRegisterEvent {
            const message = new DelegateRegisterEvent({});
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.delegate_hid != null) {
                message.delegate_hid = data.delegate_hid;
            }
            if (data.user_hid != null) {
                message.user_hid = data.user_hid;
            }
            if (data.delegate_address != null) {
                message.delegate_address = data.delegate_address;
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: string;
                delegate_hid?: string;
                user_hid?: string;
                delegate_address?: string;
            } = {};
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.delegate_hid != null) {
                data.delegate_hid = this.delegate_hid;
            }
            if (this.user_hid != null) {
                data.user_hid = this.user_hid;
            }
            if (this.delegate_address != null) {
                data.delegate_address = this.delegate_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (this.delegate_hid.length)
                writer.writeString(2, this.delegate_hid);
            if (this.user_hid.length)
                writer.writeString(3, this.user_hid);
            if (this.delegate_address.length)
                writer.writeString(4, this.delegate_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegateRegisterEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegateRegisterEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner = reader.readString();
                        break;
                    case 2:
                        message.delegate_hid = reader.readString();
                        break;
                    case 3:
                        message.user_hid = reader.readString();
                        break;
                    case 4:
                        message.delegate_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegateRegisterEvent {
            return DelegateRegisterEvent.deserialize(bytes);
        }
    }
    export class DelegateRemoveEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegate_address?: string;
            delegate_hid?: string;
            owner_address?: string;
            owner_hid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegate_address" in data && data.delegate_address != undefined) {
                    this.delegate_address = data.delegate_address;
                }
                if ("delegate_hid" in data && data.delegate_hid != undefined) {
                    this.delegate_hid = data.delegate_hid;
                }
                if ("owner_address" in data && data.owner_address != undefined) {
                    this.owner_address = data.owner_address;
                }
                if ("owner_hid" in data && data.owner_hid != undefined) {
                    this.owner_hid = data.owner_hid;
                }
            }
        }
        get delegate_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegate_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get delegate_hid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set delegate_hid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set owner_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get owner_hid() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set owner_hid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            delegate_address?: string;
            delegate_hid?: string;
            owner_address?: string;
            owner_hid?: string;
        }): DelegateRemoveEvent {
            const message = new DelegateRemoveEvent({});
            if (data.delegate_address != null) {
                message.delegate_address = data.delegate_address;
            }
            if (data.delegate_hid != null) {
                message.delegate_hid = data.delegate_hid;
            }
            if (data.owner_address != null) {
                message.owner_address = data.owner_address;
            }
            if (data.owner_hid != null) {
                message.owner_hid = data.owner_hid;
            }
            return message;
        }
        toObject() {
            const data: {
                delegate_address?: string;
                delegate_hid?: string;
                owner_address?: string;
                owner_hid?: string;
            } = {};
            if (this.delegate_address != null) {
                data.delegate_address = this.delegate_address;
            }
            if (this.delegate_hid != null) {
                data.delegate_hid = this.delegate_hid;
            }
            if (this.owner_address != null) {
                data.owner_address = this.owner_address;
            }
            if (this.owner_hid != null) {
                data.owner_hid = this.owner_hid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegate_address.length)
                writer.writeString(1, this.delegate_address);
            if (this.delegate_hid.length)
                writer.writeString(2, this.delegate_hid);
            if (this.owner_address.length)
                writer.writeString(3, this.owner_address);
            if (this.owner_hid.length)
                writer.writeString(4, this.owner_hid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegateRemoveEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegateRemoveEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegate_address = reader.readString();
                        break;
                    case 2:
                        message.delegate_hid = reader.readString();
                        break;
                    case 3:
                        message.owner_address = reader.readString();
                        break;
                    case 4:
                        message.owner_hid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegateRemoveEvent {
            return DelegateRemoveEvent.deserialize(bytes);
        }
    }
    export class EventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sequence_number?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sequence_number" in data && data.sequence_number != undefined) {
                    this.sequence_number = data.sequence_number;
                }
            }
        }
        get sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sequence_number(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sequence_number?: number;
        }): EventRequest {
            const message = new EventRequest({});
            if (data.sequence_number != null) {
                message.sequence_number = data.sequence_number;
            }
            return message;
        }
        toObject() {
            const data: {
                sequence_number?: number;
            } = {};
            if (this.sequence_number != null) {
                data.sequence_number = this.sequence_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sequence_number != 0)
                writer.writeInt64(1, this.sequence_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sequence_number = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventRequest {
            return EventRequest.deserialize(bytes);
        }
    }
    export class EventsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sequence_number?: number;
            event_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sequence_number" in data && data.sequence_number != undefined) {
                    this.sequence_number = data.sequence_number;
                }
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
            }
        }
        get sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sequence_number(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get event_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set event_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sequence_number?: number;
            event_type?: string;
        }): EventsRequest {
            const message = new EventsRequest({});
            if (data.sequence_number != null) {
                message.sequence_number = data.sequence_number;
            }
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            return message;
        }
        toObject() {
            const data: {
                sequence_number?: number;
                event_type?: string;
            } = {};
            if (this.sequence_number != null) {
                data.sequence_number = this.sequence_number;
            }
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sequence_number != 0)
                writer.writeInt64(1, this.sequence_number);
            if (this.event_type.length)
                writer.writeString(2, this.event_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sequence_number = reader.readInt64();
                        break;
                    case 2:
                        message.event_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventsRequest {
            return EventsRequest.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6, 7, 8, 9, 10]];
        constructor(data?: any[] | ({
            event_type?: string;
            sequence_number?: number;
        } & (({
            request_inbox_register_event?: RequestInboxRegisterEvent;
            request_event?: never;
            accept_request_event?: never;
            request_denied_event?: never;
            request_remove_from_phonebook_event?: never;
            delegate_register_event?: never;
            delegate_remove_event?: never;
            envelope?: never;
        } | {
            request_inbox_register_event?: never;
            request_event?: RequestEvent;
            accept_request_event?: never;
            request_denied_event?: never;
            request_remove_from_phonebook_event?: never;
            delegate_register_event?: never;
            delegate_remove_event?: never;
            envelope?: never;
        } | {
            request_inbox_register_event?: never;
            request_event?: never;
            accept_request_event?: AcceptRequestEvent;
            request_denied_event?: never;
            request_remove_from_phonebook_event?: never;
            delegate_register_event?: never;
            delegate_remove_event?: never;
            envelope?: never;
        } | {
            request_inbox_register_event?: never;
            request_event?: never;
            accept_request_event?: never;
            request_denied_event?: RequestDeniedEvent;
            request_remove_from_phonebook_event?: never;
            delegate_register_event?: never;
            delegate_remove_event?: never;
            envelope?: never;
        } | {
            request_inbox_register_event?: never;
            request_event?: never;
            accept_request_event?: never;
            request_denied_event?: never;
            request_remove_from_phonebook_event?: RequestRemoveFromPhonebookEvent;
            delegate_register_event?: never;
            delegate_remove_event?: never;
            envelope?: never;
        } | {
            request_inbox_register_event?: never;
            request_event?: never;
            accept_request_event?: never;
            request_denied_event?: never;
            request_remove_from_phonebook_event?: never;
            delegate_register_event?: DelegateRegisterEvent;
            delegate_remove_event?: never;
            envelope?: never;
        } | {
            request_inbox_register_event?: never;
            request_event?: never;
            accept_request_event?: never;
            request_denied_event?: never;
            request_remove_from_phonebook_event?: never;
            delegate_register_event?: never;
            delegate_remove_event?: DelegateRemoveEvent;
            envelope?: never;
        } | {
            request_inbox_register_event?: never;
            request_event?: never;
            accept_request_event?: never;
            request_denied_event?: never;
            request_remove_from_phonebook_event?: never;
            delegate_register_event?: never;
            delegate_remove_event?: never;
            envelope?: Envelope;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
                if ("sequence_number" in data && data.sequence_number != undefined) {
                    this.sequence_number = data.sequence_number;
                }
                if ("request_inbox_register_event" in data && data.request_inbox_register_event != undefined) {
                    this.request_inbox_register_event = data.request_inbox_register_event;
                }
                if ("request_event" in data && data.request_event != undefined) {
                    this.request_event = data.request_event;
                }
                if ("accept_request_event" in data && data.accept_request_event != undefined) {
                    this.accept_request_event = data.accept_request_event;
                }
                if ("request_denied_event" in data && data.request_denied_event != undefined) {
                    this.request_denied_event = data.request_denied_event;
                }
                if ("request_remove_from_phonebook_event" in data && data.request_remove_from_phonebook_event != undefined) {
                    this.request_remove_from_phonebook_event = data.request_remove_from_phonebook_event;
                }
                if ("delegate_register_event" in data && data.delegate_register_event != undefined) {
                    this.delegate_register_event = data.delegate_register_event;
                }
                if ("delegate_remove_event" in data && data.delegate_remove_event != undefined) {
                    this.delegate_remove_event = data.delegate_remove_event;
                }
                if ("envelope" in data && data.envelope != undefined) {
                    this.envelope = data.envelope;
                }
            }
        }
        get event_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set event_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sequence_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_inbox_register_event() {
            return pb_1.Message.getWrapperField(this, RequestInboxRegisterEvent, 3) as RequestInboxRegisterEvent;
        }
        set request_inbox_register_event(value: RequestInboxRegisterEvent) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_request_inbox_register_event() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get request_event() {
            return pb_1.Message.getWrapperField(this, RequestEvent, 4) as RequestEvent;
        }
        set request_event(value: RequestEvent) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_request_event() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get accept_request_event() {
            return pb_1.Message.getWrapperField(this, AcceptRequestEvent, 5) as AcceptRequestEvent;
        }
        set accept_request_event(value: AcceptRequestEvent) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_accept_request_event() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get request_denied_event() {
            return pb_1.Message.getWrapperField(this, RequestDeniedEvent, 6) as RequestDeniedEvent;
        }
        set request_denied_event(value: RequestDeniedEvent) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_request_denied_event() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get request_remove_from_phonebook_event() {
            return pb_1.Message.getWrapperField(this, RequestRemoveFromPhonebookEvent, 7) as RequestRemoveFromPhonebookEvent;
        }
        set request_remove_from_phonebook_event(value: RequestRemoveFromPhonebookEvent) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_request_remove_from_phonebook_event() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get delegate_register_event() {
            return pb_1.Message.getWrapperField(this, DelegateRegisterEvent, 8) as DelegateRegisterEvent;
        }
        set delegate_register_event(value: DelegateRegisterEvent) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_delegate_register_event() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get delegate_remove_event() {
            return pb_1.Message.getWrapperField(this, DelegateRemoveEvent, 9) as DelegateRemoveEvent;
        }
        set delegate_remove_event(value: DelegateRemoveEvent) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_delegate_remove_event() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get envelope() {
            return pb_1.Message.getWrapperField(this, Envelope, 10) as Envelope;
        }
        set envelope(value: Envelope) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_envelope() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get event() {
            const cases: {
                [index: number]: "none" | "request_inbox_register_event" | "request_event" | "accept_request_event" | "request_denied_event" | "request_remove_from_phonebook_event" | "delegate_register_event" | "delegate_remove_event" | "envelope";
            } = {
                0: "none",
                3: "request_inbox_register_event",
                4: "request_event",
                5: "accept_request_event",
                6: "request_denied_event",
                7: "request_remove_from_phonebook_event",
                8: "delegate_register_event",
                9: "delegate_remove_event",
                10: "envelope"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data: {
            event_type?: string;
            sequence_number?: number;
            request_inbox_register_event?: ReturnType<typeof RequestInboxRegisterEvent.prototype.toObject>;
            request_event?: ReturnType<typeof RequestEvent.prototype.toObject>;
            accept_request_event?: ReturnType<typeof AcceptRequestEvent.prototype.toObject>;
            request_denied_event?: ReturnType<typeof RequestDeniedEvent.prototype.toObject>;
            request_remove_from_phonebook_event?: ReturnType<typeof RequestRemoveFromPhonebookEvent.prototype.toObject>;
            delegate_register_event?: ReturnType<typeof DelegateRegisterEvent.prototype.toObject>;
            delegate_remove_event?: ReturnType<typeof DelegateRemoveEvent.prototype.toObject>;
            envelope?: ReturnType<typeof Envelope.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            if (data.sequence_number != null) {
                message.sequence_number = data.sequence_number;
            }
            if (data.request_inbox_register_event != null) {
                message.request_inbox_register_event = RequestInboxRegisterEvent.fromObject(data.request_inbox_register_event);
            }
            if (data.request_event != null) {
                message.request_event = RequestEvent.fromObject(data.request_event);
            }
            if (data.accept_request_event != null) {
                message.accept_request_event = AcceptRequestEvent.fromObject(data.accept_request_event);
            }
            if (data.request_denied_event != null) {
                message.request_denied_event = RequestDeniedEvent.fromObject(data.request_denied_event);
            }
            if (data.request_remove_from_phonebook_event != null) {
                message.request_remove_from_phonebook_event = RequestRemoveFromPhonebookEvent.fromObject(data.request_remove_from_phonebook_event);
            }
            if (data.delegate_register_event != null) {
                message.delegate_register_event = DelegateRegisterEvent.fromObject(data.delegate_register_event);
            }
            if (data.delegate_remove_event != null) {
                message.delegate_remove_event = DelegateRemoveEvent.fromObject(data.delegate_remove_event);
            }
            if (data.envelope != null) {
                message.envelope = Envelope.fromObject(data.envelope);
            }
            return message;
        }
        toObject() {
            const data: {
                event_type?: string;
                sequence_number?: number;
                request_inbox_register_event?: ReturnType<typeof RequestInboxRegisterEvent.prototype.toObject>;
                request_event?: ReturnType<typeof RequestEvent.prototype.toObject>;
                accept_request_event?: ReturnType<typeof AcceptRequestEvent.prototype.toObject>;
                request_denied_event?: ReturnType<typeof RequestDeniedEvent.prototype.toObject>;
                request_remove_from_phonebook_event?: ReturnType<typeof RequestRemoveFromPhonebookEvent.prototype.toObject>;
                delegate_register_event?: ReturnType<typeof DelegateRegisterEvent.prototype.toObject>;
                delegate_remove_event?: ReturnType<typeof DelegateRemoveEvent.prototype.toObject>;
                envelope?: ReturnType<typeof Envelope.prototype.toObject>;
            } = {};
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            if (this.sequence_number != null) {
                data.sequence_number = this.sequence_number;
            }
            if (this.request_inbox_register_event != null) {
                data.request_inbox_register_event = this.request_inbox_register_event.toObject();
            }
            if (this.request_event != null) {
                data.request_event = this.request_event.toObject();
            }
            if (this.accept_request_event != null) {
                data.accept_request_event = this.accept_request_event.toObject();
            }
            if (this.request_denied_event != null) {
                data.request_denied_event = this.request_denied_event.toObject();
            }
            if (this.request_remove_from_phonebook_event != null) {
                data.request_remove_from_phonebook_event = this.request_remove_from_phonebook_event.toObject();
            }
            if (this.delegate_register_event != null) {
                data.delegate_register_event = this.delegate_register_event.toObject();
            }
            if (this.delegate_remove_event != null) {
                data.delegate_remove_event = this.delegate_remove_event.toObject();
            }
            if (this.envelope != null) {
                data.envelope = this.envelope.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_type.length)
                writer.writeString(1, this.event_type);
            if (this.sequence_number != 0)
                writer.writeInt64(2, this.sequence_number);
            if (this.has_request_inbox_register_event)
                writer.writeMessage(3, this.request_inbox_register_event, () => this.request_inbox_register_event.serialize(writer));
            if (this.has_request_event)
                writer.writeMessage(4, this.request_event, () => this.request_event.serialize(writer));
            if (this.has_accept_request_event)
                writer.writeMessage(5, this.accept_request_event, () => this.accept_request_event.serialize(writer));
            if (this.has_request_denied_event)
                writer.writeMessage(6, this.request_denied_event, () => this.request_denied_event.serialize(writer));
            if (this.has_request_remove_from_phonebook_event)
                writer.writeMessage(7, this.request_remove_from_phonebook_event, () => this.request_remove_from_phonebook_event.serialize(writer));
            if (this.has_delegate_register_event)
                writer.writeMessage(8, this.delegate_register_event, () => this.delegate_register_event.serialize(writer));
            if (this.has_delegate_remove_event)
                writer.writeMessage(9, this.delegate_remove_event, () => this.delegate_remove_event.serialize(writer));
            if (this.has_envelope)
                writer.writeMessage(10, this.envelope, () => this.envelope.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_type = reader.readString();
                        break;
                    case 2:
                        message.sequence_number = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.request_inbox_register_event, () => message.request_inbox_register_event = RequestInboxRegisterEvent.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.request_event, () => message.request_event = RequestEvent.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.accept_request_event, () => message.accept_request_event = AcceptRequestEvent.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.request_denied_event, () => message.request_denied_event = RequestDeniedEvent.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.request_remove_from_phonebook_event, () => message.request_remove_from_phonebook_event = RequestRemoveFromPhonebookEvent.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.delegate_register_event, () => message.delegate_register_event = DelegateRegisterEvent.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.delegate_remove_event, () => message.delegate_remove_event = DelegateRemoveEvent.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.envelope, () => message.envelope = Envelope.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
}
